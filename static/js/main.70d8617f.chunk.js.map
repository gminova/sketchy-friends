{"version":3,"sources":["components/drawingBoard/Canvas.js","components/drawingBoard/DrawingBoard.js","components/inputForm/InputForm.js","utils/getProfile.js","components/inputForm/Display.js","components/App.js","index.js"],"names":["Canvas","React","useState","color","setColor","mouseX","setX","mouseY","setY","useEffect","handleMouseMove","event","x","y","window","addEventListener","removeEventListener","ref","useRef","myCanvas","current","context","getContext","rect","getBoundingClientRect","isDrawing","e","clientX","left","clientY","top","drawLine","document","getElementById","clearRect","width","height","x1","y1","x2","y2","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","className","type","value","onChange","target","id","DrawingBoard","InputForm","props","userInput","setUserInput","display","htmlFor","name","placeholder","onClick","console","log","preventDefault","setProfile","getProfile","username","a","url","fetch","response","json","Display","picture","setPicture","profile","then","data","src","avatar_url","alt","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.70d8617f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst Canvas = () => {\n  //\n  // COLOR PICK ---------------------------------------\n  //\n  //\n  const [color, setColor] = React.useState(\"#000000\");\n  const onColorChange = event => {\n    setColor(event.target.value);\n  };\n\n  //\n  // GLOBAL MOUSE COORDINATES ---------------------------------------\n  //\n  //\n  const [mouseX, setX] = useState(0);\n  const [mouseY, setY] = useState(0);\n\n  useEffect(() => {\n    // if user uses mouse, update coordinates\n    const handleMouseMove = event => {\n      setX(event.x);\n      setY(event.y);\n    };\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    return () => window.removeEventListener(\"mousemove\", handleMouseMove);\n  }, []);\n\n  //\n  // CANVAS ---------------------------------------\n  //\n  let ref = useRef();\n\n  useEffect(() => {\n    let myCanvas = ref.current;\n    // Get the canvas context - we will draw on this and call functions to draw on the context\n    const context = myCanvas.getContext(\"2d\");\n    const rect = myCanvas.getBoundingClientRect();\n    // if user is drawing)mousedown) this will be set to true, else false (mouseup)\n    let isDrawing = false;\n    //\n    // DRAWING MOUSE COORDINATES---------------------------------------\n    //\n    let x = 0;\n    let y = 0;\n\n    // Add the event listeners for mousedown, mousemove, and mouseup\n    myCanvas.addEventListener(\"mousedown\", e => {\n      x = e.clientX - rect.left;\n      y = e.clientY - rect.top;\n      isDrawing = true;\n    });\n\n    // Add an event listener when the mouse if moved\n    myCanvas.addEventListener(\"mousemove\", e => {\n      if (isDrawing) {\n        drawLine(context, x, y, e.clientX - rect.left, e.clientY - rect.top);\n        x = e.clientX - rect.left;\n        y = e.clientY - rect.top;\n      }\n    });\n    // When the mouse up takes place we need to stop drawing\n    myCanvas.addEventListener(\"mouseup\", e => {\n      if (isDrawing) {\n        drawLine(context, x, y, e.clientX - rect.left, e.clientY - rect.top);\n        x = 0;\n        y = 0;\n        isDrawing = false;\n      }\n    });\n\n    document.getElementById(\"clear\").addEventListener(\n      \"click\",\n      function() {\n        context.clearRect(0, 0, myCanvas.width, myCanvas.height);\n      },\n      false\n    );\n\n    // core drawing function - takes the mouse coordinates and the context\n    // and draws from one coordinate point [x,y] to another [x,y]\n    const drawLine = (context, x1, y1, x2, y2) => {\n      context.beginPath();\n      context.strokeStyle = color; // '#000000';\n      context.lineWidth = 3;\n      context.moveTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.stroke();\n      context.closePath();\n    };\n  }, [color]);\n\n  return (\n    <div className=\"drawing-board__container\">\n      <canvas\n        ref={ref}\n        className=\"drawing-board__canvas\"\n        width={500}\n        height={500}\n      ></canvas>\n      <br />\n      <p className=\"drawing-board__color-picker-label\">Select a colour: </p>\n      <input\n        type=\"color\"\n        className=\"drawing-board__color-picker\"\n        value={color}\n        onChange={onColorChange}\n      ></input>\n      <pre>\n        {mouseX}:{mouseY}\n      </pre>\n      <button id=\"clear\">Clear</button>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React from \"react\";\nimport Canvas from \"./Canvas\";\n\nconst DrawingBoard = () => {\n  return (\n      <Canvas className=\"drawing-board__container\" />\n  );\n};\n\nexport default DrawingBoard;\n","import React, { useState } from \"react\";\n\nconst InputForm = props => {\n  const [userInput, setUserInput] = useState('');\n\n  const handleSubmit = event => {\n    console.log(userInput);\n    event.preventDefault();\n    props.setProfile(userInput);\n  }\n\n  return (\n    <div>\n      <form className=\"input-form\">\n        <h1 display=\"none\">Sketchy Friends</h1>\n        <label className=\"input-form__label\" htmlFor=\"input-form__input\">\n          Enter any Github handle and try to draw your friends:\n          <input\n            type=\"text\"\n            name=\"input-form__input\"\n            id=\"input-form__input\"\n            className=\"input-form__input\"\n            placeholder=\"fac-17\"\n            value={userInput}\n            onChange={event => setUserInput(event.target.value)}\n          />\n        </label>\n        <input\n          type=\"submit\"\n          value=\"Find\"\n          onClick={handleSubmit}\n          className=\"input-form__submit\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default InputForm;\n","const getProfile = async username => {\n  const url = `https://api.github.com/users/${username}`;\n  // const url = `https://api.github.com/users/${username}?access_token=${token}`;\n    try {\n      let response = await fetch(url);\n      let json = await response.json();\n      return json;\n    } catch (error) {\n      console.log(error);\n    }\n};\n\nexport default getProfile;\n","import React, { useState, useEffect } from \"react\";\nimport getProfile from \"../../utils/getProfile.js\"\n\n\nconst Display = props => {\n  const [picture, setPicture] = useState(null)\n  let username = (props.profile)\n\n  useEffect(() => {\n    getProfile(username).then(data => setPicture(data))\n  }, [username]);\n\n  if (!picture) {\n    return <h3>Loading...</h3>;\n  }\n\n  return (\n\n    <div className=\"display--image-container\">\n      <img src={picture.avatar_url} className=\"display--image\" alt=\"avatar\" />\n      <p className=\"display--p\">You are drawing:  </p>\n      <h3 className=\"display--h3\">{username}</h3>\n    </div>\n  );\n};\n\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport DrawingBoard from \"./drawingBoard/DrawingBoard\";\nimport InputForm from \"./inputForm/InputForm\";\nimport Display from \"./inputForm/Display\";\n\nfunction App() {\n  const [profile, setProfile] = useState('fac-17')\n\n\n  return (\n    <div className=\"app\">\n      <InputForm className=\"app--input-form\" profile={profile} setProfile={setProfile} />\n      <section className=\"app--drawing-section\">\n        <Display className=\"app--display\" profile={profile} />\n        <DrawingBoard className=\"app--drawing-board\" />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}